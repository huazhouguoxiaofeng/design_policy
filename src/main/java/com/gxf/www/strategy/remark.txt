策略模式

1、首先定义一个抽象大类，这里的抽象大类是鸭子：com.gxf.www.design_policy.strategy.duck.Duck
2、每个鸭子都会叫，都会飞，但是叫的飞的方式都可能不一样，而且新增一个鸭子的话，可能会新增叫的飞的方式。
    而且新增一个鸭子的话，不能改变原来的代码，俗称解耦。

3、鸭子有各种各样的行为，比如叫、飞。这个抽象类里面应该有这些属性，
        既然这些属性可以动态，那样的话，叫啊、飞啊、也应该有个大类接口，叫接口，飞接口，以便继承可以实现动态性。
            叫1类、叫2类、叫3类。。。分别实现叫接口；
            飞1类、飞2类、飞3类。。。分别实现飞接口；

4、鸭子类一、鸭子类二、鸭子类三。。。分别继承了大类鸭子，也就继承了拥有了大类鸭子的属性。
    每类鸭子，你需要什么叫的、飞的属性，就调用其构造方法就是了，构造方法之后，就自然而然把相对应属性传给鸭子抽象类了

    然后，你要用的时候这个鸭子，然后调用其构造方法之后（用鸭子抽象类来接收），相对应的属性就传给抽象类鸭子了。
    鸭子抽象类对象得到之后，调用其相对应方法，应该已经有相对应属性了，所以就自然而然调相对应方法了



